<!--
***********************************************************************************************
Microsoft.PackageDependencyResolution.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved. 
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <!--
    *************************************
    1. INPUT PROPERTIES
    - That configure the PackageDependency targets
    *************************************
    -->
  
  <!-- General Properties -->
  <PropertyGroup>
    <!-- Turn off NuGet Task -->
    <ResolveNuGetPackages>false</ResolveNuGetPackages>

    <!-- Flag PackageDependency Tasks -->
    <EnableResolvePackageDependencies 
      Condition="'$(EnableResolvePackageDependencies)' == '' and '$(MSBuildProjectExtension)' != '.xproj'">true</EnableResolvePackageDependencies>
  </PropertyGroup>

  <!-- Project Lock File -->
  <PropertyGroup Condition="'$(ProjectLockFile)' == ''">
    <_ProjectSpecificProjectJsonFile>$(MSBuildProjectName).project.json</_ProjectSpecificProjectJsonFile>
    <ProjectLockFile Condition="Exists('$(_ProjectSpecificProjectJsonFile)')">$(MSBuildProjectDirectory)/$(MSBuildProjectName).project.lock.json</ProjectLockFile>
    <ProjectLockFile Condition="!Exists('$(_ProjectSpecificProjectJsonFile)')">$(MSBuildProjectDirectory)/project.lock.json</ProjectLockFile>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Build and Publish Properties to determine whether we are building or publishing. Default values -->
    <ResolvePackageDependenciesForBuild Condition="'$(ResolvePackageDependenciesForBuild)' == ''">true</ResolvePackageDependenciesForBuild>
    <ResolvePackageDependenciesForPublish Condition="'$(ResolvePackageDependenciesForPublish)' == ''">false</ResolvePackageDependenciesForPublish>
  </PropertyGroup>

  <!-- Target Moniker + RID-->
  <PropertyGroup Condition="'$(_NugetTargetMonikerAndRID)' == ''">
    <_NugetTargetMonikerAndRID Condition="'$(NuGetRuntimeIdentifier)' == ''">$(NuGetTargetMoniker)</_NugetTargetMonikerAndRID>
    <_NugetTargetMonikerAndRID Condition="'$(NuGetRuntimeIdentifier)' != ''">$(NuGetTargetMoniker)/$(NuGetRuntimeIdentifier)</_NugetTargetMonikerAndRID>
  </PropertyGroup>

  <!--
    *************************************
    2. EXTERNAL PROPERTIES and ITEMS
    - Override or add to external targets
    *************************************
    -->

  <PropertyGroup>
    <ResolveAssemblyReferencesDependsOn>
      $(ResolveAssemblyReferencesDependsOn);
      ResolvePackageDependenciesForBuild;
      ResolvePackageDependenciesForPublish
    </ResolveAssemblyReferencesDependsOn>

    <PrepareResourcesDependsOn>
      ResolvePackageDependenciesForBuild;
      ResolvePackageDependenciesForPublish;
      $(PrepareResourcesDependsOn)
    </PrepareResourcesDependsOn>

  </PropertyGroup>


  <!--
    *************************************
    3. BUILD and PUBLISH TARGETS
    - Override the Depends-On properties, or the individual targets
    *************************************
    -->

  <!--
    ============================================================
                     ResolvePackageDependenciesForBuild

    Populate items for build...
    ============================================================
    -->
  <PropertyGroup>
    <ResolvePackageDependenciesForBuildDependsOn>
      ResolveLockFileReferences;
      ResolveLockFileAnalyzers;
      ResolveLockFileCopyLocalProjectDeps;
    </ResolvePackageDependenciesForBuildDependsOn>
  </PropertyGroup>
  <Target Name="ResolvePackageDependenciesForBuild"
          Condition="'$(ResolvePackageDependenciesForBuild)' == 'true' and '$(EnableResolvePackageDependencies)' == 'true' and Exists('$(ProjectLockFile)')"
          DependsOnTargets="$(ResolvePackageDependenciesForBuildDependsOn)" />

  <!--
    ============================================================
                     ResolvePackageDependenciesForPublish

    Populate items for publish...
    ============================================================
    -->
  <PropertyGroup>
    <ResolvePackageDependenciesForPublishDependsOn>
      ResolveLockFileReferences;
      ResolveLockFileAnalyzers;
      ResolveLockFileCopyLocalFullFramework;
    </ResolvePackageDependenciesForPublishDependsOn>
  </PropertyGroup>
  <Target Name="ResolvePackageDependenciesForPublish"
          Condition="'$(ResolvePackageDependenciesForPublish)' == 'true' and '$(EnableResolvePackageDependencies)' == 'true' and Exists('$(ProjectLockFile)')"
          DependsOnTargets="$(ResolvePackageDependenciesForPublishDependsOn)" />

  
  <!--
    *************************************
    4. Package Dependency TASK and TARGETS
    - Raise the lock file to MSBuild Items and create derived items
    *************************************
    -->

  <UsingTask TaskName="Microsoft.DotNet.Core.Build.Tasks.ResolvePackageDependencies" 
             AssemblyFile="$(MicrosoftDotNetCoreBuildTasksAssembly)" />

  <!--
    ============================================================
                     RunResolvePackageDependencies

    Generate Definitions and Dependencies based on ResolvePackageDependencies task
    ============================================================
    -->
  <Target Name="RunResolvePackageDependencies">
    <ResolvePackageDependencies
      ProjectLockFile="$(ProjectLockFile)">

      <Output TaskParameter="TargetDefinitions" ItemName="TargetDefinitions" />
      <Output TaskParameter="PackageDefinitions" ItemName="PackageDefinitions" />
      <Output TaskParameter="FileDefinitions" ItemName="FileDefinitions" />
      <Output TaskParameter="PackageDependencies" ItemName="PackageDependencies" />
      <Output TaskParameter="FileDependencies" ItemName="FileDependencies" />
    </ResolvePackageDependencies>

  </Target>

  <!--
    ============================================================
    Reference Targets: For populating References based on lock file
    - _ComputeLockFileReferences
    - ResolveLockFileReferences
    ============================================================
    -->

  <Target Name="_ComputeLockFileReferences" 
          DependsOnTargets="RunResolvePackageDependencies" 
          Returns="ResolvedCompileFileDefinitions">
    <ItemGroup>
      <TFMFileItems Include="@(FileDependencies->WithMetadataValue('ParentTarget', '$(_NugetTargetMonikerAndRID)'))" />
      <_CompileFileItems Include="@(TFMFileItems->WithMetadataValue('FileGroup', 'CompileAssembly'))" />
      
      <!-- Get corresponding file definitions -->
      <__CompileFileDefinitions Include="@(FileDefinitions)" Exclude="@(_CompileFileItems)" />
      <_CompileFileDefinitions Include="@(FileDefinitions)" Exclude="@(__CompileFileDefinitions)" />

      <ResolvedCompileFileDefinitions Include="%(_CompileFileDefinitions.ResolvedPath)">
        <Private>false</Private>
        <NuGetIsFrameworkReference>false</NuGetIsFrameworkReference>
        <NuGetSourceType>Package</NuGetSourceType>
      </ResolvedCompileFileDefinitions>
      
    </ItemGroup>
  </Target>

  <Target Name="ResolveLockFileReferences"
          DependsOnTargets="_ComputeLockFileReferences">
    <ItemGroup>
      <!-- Add the references we computed -->
      <Reference Include="@(ResolvedCompileFileDefinitions)" />
    </ItemGroup>
  </Target>

  <!--
    ============================================================
    Analyzer Targets: For populating Analyzers based on lock file
    - _ComputeLockFileAnalyzers
    - ResolveLockFileAnalyzers
    ============================================================
    -->

  <Target Name="_ComputeLockFileAnalyzers"
        DependsOnTargets="RunResolvePackageDependencies"
        Returns="ResolvedAnalyzers">
    <ItemGroup>
      <AnalyzerFiles Include="@(FileDefinitions->WithMetadataValue('Analyzer', 'true'))" />
      <ResolvedAnalyzers Include="%(AnalyzerFiles.ResolvedPath)" />
    </ItemGroup>
  </Target>

  <Target Name="ResolveLockFileAnalyzers"
          DependsOnTargets="_ComputeLockFileAnalyzers">    
    <ItemGroup>
      
      <!-- Add the analyzers we computed -->
      <Analyzer Include="@(ResolvedAnalyzers)" />
      
    </ItemGroup>
  </Target>

  <!--
    ============================================================
    CopyLocal Targets: For populating CopyLocal based on lock file
    - _ComputeLockFileCopyLocal
    - ResolveLockFileCopyLocalProjectDeps
    - ResolveLockFileCopyLocalFullFramework
    ============================================================
    -->

  <Target Name="_ComputeLockFileCopyLocal"
        DependsOnTargets="RunResolvePackageDependencies"
        Returns="NativeCopyLocalItems;RuntimeCopyLocalItems;ResourceCopyLocalItems;AllCopyLocalItems">
    <ItemGroup>
      <TFMFileItems Include="@(FileDependencies->WithMetadataValue('ParentTarget', '$(_NugetTargetMonikerAndRID)'))" />

      <!--NativeLibrary-->
      <_NativeFileItems Include="@(TFMFileItems->WithMetadataValue('FileGroup', 'NativeLibrary'))" />
      <__NativeCopyLocalItems Include="@(FileDefinitions)" Exclude="@(_NativeFileItems)" />
      <_NativeCopyLocalItems Include="@(FileDefinitions)" Exclude="@(__NativeCopyLocalItems)" />
      <NativeCopyLocalItems Include="%(_NativeCopyLocalItems.ResolvedPath)" />

      <!--RuntimeAssembly-->
      <_RuntimeFileItems Include="@(TFMFileItems->WithMetadataValue('FileGroup', 'RuntimeAssembly'))" />
      <__RuntimeCopyLocalItems Include="@(FileDefinitions)" Exclude="@(_RuntimeFileItems)" />
      <_RuntimeCopyLocalItems Include="@(FileDefinitions)" Exclude="@(__RuntimeCopyLocalItems)" />
      <RuntimeCopyLocalItems Include="%(_RuntimeCopyLocalItems.ResolvedPath)" />

      <!--ResourceAssembly-->
      <_ResourceFileItems Include="@(TFMFileItems->WithMetadataValue('FileGroup', 'ResourceAssembly'))" />
      <__ResourceCopyLocalItems Include="@(FileDefinitions)" Exclude="@(_ResourceFileItems)" />
      <_ResourceCopyLocalItems Include="@(FileDefinitions)" Exclude="@(__ResourceCopyLocalItems)" />
      <ResourceCopyLocalItems Include="%(_ResourceCopyLocalItems.ResolvedPath)" />

      <!-- ALL -->
      <AllCopyLocalItems Include="@(NativeCopyLocalItems);@(RuntimeCopyLocalItems);@(ResourceCopyLocalItems)">
        <Private>false</Private>
        <NuGetIsFrameworkReference>false</NuGetIsFrameworkReference>
        <NuGetSourceType>Package</NuGetSourceType>
      </AllCopyLocalItems>

    </ItemGroup>
  </Target>

  <Target Name="ResolveLockFileCopyLocalProjectDeps"
          DependsOnTargets="_ComputeLockFileCopyLocal">

    <!-- Add the copy local items -->
    <ItemGroup>
      <ReferenceCopyLocalPaths Include="@(RuntimeCopyLocalItems)" />
    </ItemGroup>

  </Target>

  <Target Name="ResolveLockFileCopyLocalFullFramework"
          DependsOnTargets="_ComputeLockFileCopyLocal">

    <!-- Add the copy local items -->
    <ItemGroup>
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" />
      <ReferenceCopyLocalPaths Include="@(AllCopyLocalItems)" />
    </ItemGroup>

  </Target>
  
</Project>